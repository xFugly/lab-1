#include <iostream>
using namespace std;

int main() {
    // 1. Создайте переменную со значением на Ваше усмотрение
    int my = 42;
    cout << "1. Создана переменная my = " << my << endl;
    
    // 2. Объявите указатель на созданную переменную
    int *ptr = &my;
    cout << "2. Создан указатель ptr на переменную my" << endl;
    
    // 3. Выведите в консоль адрес указателя и значение, которое хранится по этому адресу
    cout << "3. Адрес указателя ptr: " << &ptr << endl;
    cout << "   Адрес, на который указывает ptr: " << ptr << endl;
    cout << "   Значение по адресу ptr: " << *ptr << endl;
    
    // 4. Измените значение, которое хранится по адресу указателя
    *ptr = 100;
    cout << "4. Изменено значение через указатель: *ptr = 100" << endl;
    
    // 5. Убедитесь, что переменная из 1-го пункта так же изменила своё значение
    cout << "5. Проверка переменной my: " << my << endl;
    cout << "   Проверка через указатель *ptr: " << *ptr << endl;
    
    // 6. Создайте массив из нескольких элементов (тип и значение на Ваше усмотрение)
    int numbers[5] = {10, 20, 30, 40, 50};
    cout << "6. Создан массив numbers: {10, 20, 30, 40, 50}" << endl;
    
    // 7. Выведите все элементы массива в консоль, используя указатель
    int *arrayPtr = numbers; // Указатель на первый элемент массива
    cout << "7. Вывод массива через указатель: ";
    for (int i = 0; i < 5; i++) {
        cout << *(arrayPtr + i) << " ";
    }
    cout << endl;

    // 8. Объявите целую переменную со значением 5
    int constVar = 5;
    cout << "8. Создана переменная constVar = " << constVar << endl;
    
    // 9. Создайте такой указатель на эту переменную, чтобы нельзя было менять адрес,
    // но при этом, чтобы через него можно было менять значение
    int *const constPtr = &constVar;
    cout << "9. Создан константный указатель constPtr (адрес нельзя менять)" << endl;
    
    // 10. Убедитесь, что Вы всё сделали правильно
    
    // Попытка изменить значение через указатель
    *constPtr = 25;
    cout << "10. Изменение значения через указатель:" << endl;
    cout << "   *constPtr = 25 - выполнено успешно" << endl;
    cout << "   Проверка constVar: " << constVar << " (должно быть 25)" << endl;
    cout << "   Проверка *constPtr: " << *constPtr << " (должно быть 25)" << endl;
    
    // Попытка изменить адрес указателя
    int anotherVar = 100;
    cout << "   Попытка изменить адрес указателя (раскомментируйте для проверки ошибки):" << endl;
    // constPtr = &anotherVar; // ОШИБКА КОМПИЛЯЦИИ! cannot assign to variable 'constPtr' with const-qualified type 'int *const'
    
    // Демонстрация других типов указателей для сравнения
    cout << endl << "=== Дополнительная информация о типах указателей ===" << endl;
    
    // Указатель на константу (значение нельзя менять, адрес можно)
    const int *ptrToConst = &constVar;
    cout << "Указатель на константу: значение нельзя менять, адрес можно" << endl;
    cout << "   *ptrToConst = " << *ptrToConst << endl;
    // *ptrToConst = 50; // ОШИБКА - значение нельзя менять
    ptrToConst = &anotherVar; // РАБОТАЕТ - адрес можно менять
    cout << "   ptrToConst теперь указывает на anotherVar: " << *ptrToConst << endl;
    
    // Константный указатель на константу (ничего нельзя менять)
    const int *const constPtrToConst = &constVar;
    cout << "Константный указатель на константу: ничего нельзя менять" << endl;
    cout << "   *constPtrToConst = " << *constPtrToConst << endl;
    // *constPtrToConst = 50; // ОШИБКА - значение нельзя менять
    // constPtrToConst = &anotherVar; // ОШИБКА - адрес нельзя менять
    
    return 0;
}